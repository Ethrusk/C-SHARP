// Задача 3: Задайте массив из вещественных чисел с ненулевой дробной частью. 
// Найдите разницу между максимальным и минимальным элементов массива.
// массив [2.2 0.4 9.11 7.2 78.98] => 78.58
// массив [1.22 4.5 3.33] => 3.28

// Вещественные числа — это числа, у которых есть дробная часть (она может быть нулевой). 

// Для решении задачи используется функция raz, которая на выходе и получает разницу между максимальным 
// и минимальным элементов массива. 
// Также надо знать операнд, который задает случайное вещественное число — 
// rand.NextDouble() и переменную(rand) типа рандом — Random rand = new Random();




Console.WriteLine("Задача 03 - нахождение разницы между максимальным и минимальным элементами массива.");
Console.WriteLine("Массив состоит из вещественных чисел с ненулевой дробной частью.");
Console.WriteLine("Длина массива вводится пользователем с консоли.");

Console.WriteLine(" ");

Console.WriteLine("Введите количество элементов массива: ");
int R = Convert.ToInt32(Console.ReadLine()); // ввод длины массива R с консоли
double[] randomArray = new double[R]; //double[] - задаётся массив из вещественных чисел; new double[R] - создаётся массив длиной R

void arr(int R) // void — тип возвращаемого значения. Это ключевое слово используется для того, чтобы указать, 
                // что метод не возвращает ничего.
                // Далее создаётся массив.
{
Random rand = new Random();
        for (int i = 0; i < R; i++)
        {
            randomArray[i] = rand.NextDouble();
            Console.Write($"{randomArray[i]:F2} "); // F2 - описание формата вывода, 
                                        // где F - формат c плавающей запятой
                                        // 2 - кол-во знаков после запятой
        }
}

double diff(double[] randomArray)
{
double min = randomArray[0];
double max = randomArray[0];
int i = 1;
    while (i < randomArray.Length)
        {
            if (max < randomArray[i])
            max = randomArray[i];
            if (min > randomArray[i])
            min = randomArray[i];
            i++;

        }

return max-min; //Оператор return завершает выполнение текущего метода и возвращает значение из этого метода.
                // Вызов оператора return выглядит следующим образом: 
                // return (expression)] expression — это значение, которое должен вернуть метод. 
                // Если оператор в коде выглядит вот так: return; то метод не вернет ничего, 
                // но при этом завершит свою работу.
Console.Write($"\nМаксимальное значение: {max:F2}");
Console.Write($"\nМинимальное значение: {min:F2}");
}

arr(R);
Console.Write($"\nРазница между максимальным и минимальным элементов массива: {diff(randomArray):F2}");

//Знак доллара в C# используется для интерполяции строк. Он позволяет напрямую вставлять в текст выражения, 
// которые нужно вывести, используя плейсхолдеры {...}. Это удобно и экономит время, так как необходимость 
// в переводе типов и конвертациях отпадает. Интерполяция строк в C# позволяет максимальную гибкость в 
// работе со строками, делает код более читаемым и легко поддерживаемым.

// символ новой строки может быть указан как \n 